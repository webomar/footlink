# Generated by Django 4.2.3 on 2023-09-08 15:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_player', models.BooleanField(default=False)),
                ('is_coach', models.BooleanField(default=False)),
                ('is_scout', models.BooleanField(default=False)),
                ('first_name', models.CharField(max_length=255, null=True)),
                ('last_name', models.CharField(max_length=255, null=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images')),
                ('place', models.CharField(max_length=255, null=True)),
                ('country', models.CharField(max_length=255, null=True)),
                ('date_of_birth', models.DateField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('images', models.ImageField(blank=True, upload_to='post_images')),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='coach', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Zaakwaarnemer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='zaakwaarnemer', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Scout',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='scout', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('player_notes', models.TextField()),
                ('followed_players', models.ManyToManyField(related_name='scouts', to=settings.AUTH_USER_MODEL)),
                ('posts', models.ManyToManyField(related_name='scout_posts', to='firstapp.post')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='player', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('club', models.CharField(max_length=255, null=True)),
                ('nft', models.CharField(max_length=255, null=True)),
                ('competition', models.CharField(max_length=255, null=True)),
                ('length', models.IntegerField(null=True)),
                ('weight', models.IntegerField(null=True)),
                ('preferred_leg', models.CharField(max_length=10, null=True)),
                ('position', models.CharField(max_length=255, null=True)),
                ('qualities', models.CharField(max_length=255, null=True)),
                ('career_statistics', models.CharField(max_length=255, null=True)),
                ('ambition', models.TextField(null=True)),
                ('phone_number', models.CharField(max_length=20, null=True)),
                ('followed_players', models.ManyToManyField(related_name='followed', to=settings.AUTH_USER_MODEL)),
                ('media_collection', models.ManyToManyField(blank=True, related_name='players', to='firstapp.post')),
                ('posts', models.ManyToManyField(blank=True, related_name='player_posts', to='firstapp.post')),
            ],
        ),
    ]
